/* Lantern - A path tracer
 *
 * Lantern is the legal property of Adrian Astley
 * Copyright Adrian Astley 2015 - 2016
 */

#pragma once

#include "math/types.isph"

float3x3 CreateCoordinateFrame(float3 &N) {
	// [Duff et al. 17] Building An Orthonormal Basis, Revisited. JCGT. 2017.
	float sign = copysignf(1.0f, N.z);
	const float a = -1.0f / (sign + N.z);
	const float b = N.x * N.y * a;
	float3 tangent = {1.0f + sign * N.x * N.x * a, sign * b, -sign * N.x};
	float3 bitangent = {b, sign + N.y * N.y * a, -N.y};

	float3x3 ret = {
	    {tangent.x, bitangent.x, N.x},
	    {tangent.y, bitangent.y, N.y},
	    {tangent.z, bitangent.z, N.z}};
	return ret;
}

inline float3 UniformSampleHemisphere(varying float3 &normal, varying RNGState *uniform rngState) {
	float cosPhi = frandom(rngState);
	float sinPhi = sqrt(1.0f - cosPhi * cosPhi);
	float theta = k2Pi * frandom(rngState);

	float x = sinPhi * sin(theta);
	float y = cosPhi;
	float z = sinPhi * cos(theta);
	float3 localCoordinate = {x, y, z};

	float3x3 frame = CreateCoordinateFrame(normal);
	float3x3 inverseFrame = inverse(frame);

	return normalize(mul(inverseFrame, localCoordinate));
}